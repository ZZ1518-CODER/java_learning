一、数据类型
  1.1、java是一种强类型语言，每次声明变量都需要指明数据类型，在java中一共有8种基本类型，其中4种整型、2种浮点类型、1种字符类型char以及一种用于表示真值的boolean类型；
  1.2、整型
			byte占用1个字节，取值范围-128 ～ 127
			short占用2个字节，取值范围2^(-16) ~ 2^16 - 1
      		int占用4个字节，取值范围2^(-32) ~ 2^32 - 1
			long占用8个字节，取值范围2^(-64) ~ 2^64 - 1
			一般情况下，大多数使用int类型，长整型后面有一个后缀l或L，java和c++语言不同，不管在什么平台上，每种类型占用的字节数是固定的，这就为跨平台带来了很大的便利性，而且需要注意，java没有unsigned类型；
	1.3、浮点类型
      		浮点类型用于表示小数，
			float占用4个字节，有效位数为6～7位
			double占用8个字节，有效位数为15位
      	声明float类型需要在数字后面加上f或者F，没有加f或者F后缀默认是double类型； 例如 float m = 2.3f，如果不加f，程序会直接报错，因为java是不允许double直接转成float的；
      	补充：用于表示溢出和出错情况下的三个特殊浮点数值：
			* 正无穷大
			* 负无穷大
			* NaN（不是一个数字）
		  注释：常量Double.POSITIVE_INFINITY、Double.NEGATIVE_INFINITY以及Double.NaN分别代表这三个值，需要注意，不能通过==来判断一个特定值是否等于NaN，可以通过Double.isNaN(x)来判断；
		  *还需要注意浮点数的比较，因为精度问题，一般最好不要拿浮点数进行==的比较；
	1.4、char类型
		  char类型需要注意的是，和c++不一样，java中的char类型占用2个字节，用单引号包住。
		  java中的char类型和Unicode编码机制密不可分，在java中，char类型描述了UTF-16编码中的一个代码单元；
		  在程序中不建议使用char类型，除非需要处理UTF-16代码单元，最好将字符串作为抽象数据处理；
	1.5、boolean类型
	    boolean类型占用一个字节，只有两个值，true和false，需要注意的是，同c++不同，java中的0是不能转化为boolean值的。
二、变量和常量
	1.1、变量的声明以及初始化
		java中，每种变量都有具体的type，声明变量要先指明具体的类型，然后需要进行初始化（这一步是必须的），如果不尽兴初始化，编译器就会认为语句是错误的；
	    注释：从java10开始，对于局部变量，可以通过var不显示声明具体的数据类型，编译器可以通过变量的初始值自动推导出变量的类型；
			var vacationDays = 12 // this is an int value
			var greeting = "hello" // this is a string value
	1.2、常量
		java中，通过使用final来表示常量，final变量只能被赋值一次，一旦被赋值之后，就不允许再次改变了，通常声明常量为全大写；
		通过声明static final常量，可以在多个类中直接使用此常量；
		注意：java中保留了const关键字，但是目前并不允许使用。
	1.3、枚举类型
	    枚举也和c++中类似，通过enum关键字可以声明枚举类型的变量；
			enum Size {SMALL, MEDIUM, LARGE, EXTRA_LARGE};
			Size s = Size.LARGE;
三、运算符
	1.1、算术运算符
		  算术运算符和C++的基本算数运算符一样，+、-、*、/、%，算数运算中有浮点数的，结果也会被转化为浮点数；
		  需要注意的是，整数除0会产生一个异常，而浮点数除0会得到无穷大或者NaN的结果。
	1.2、数学函数与常量
		  在java中，数学函数在Math这个类中通过静态方法实现，如果想要使用java中的静态函数，需要导入对应的包；
			import static java.lang.Math.*;
		  下面展示几种常用的数值计算函数；
			double x = 4;
			double y = Math.sqrt(x);
			System.out.println(y); // prints 2.0
			double z = Math.pow(x, y); //代表x的y次幂
			System.out.println(z)； // prints 16.0
		  另外，Java中还提供了用于表示pi和e常量的最接近的近似值：
			Math.PI、 Math.E;
	1.3、数值类型的转换
		  数值类型的合法转换：待更新；
		  数值类型的强制转换：例如将double转为int型，
			double x = 9.99;
			int xx = (int)x;
		  结果，变量xx的值为9，如果想要进行四舍五入运算，可以调用Math类中的round方法；
			int xxx = (int)Math.round(x);
		  结果，变量xxx的值为10，这里需要注意，这个方法返回的结果是long类型，也需要强制类型转换为int型；
	1.4、常用运算符
		  java中常用的运算符和c++中类似，下面直接范例；
			int x = 4;
			x++; // 5
			++x; // 6
			int y = ++x; //y = 7, x = 7
			int z = (x++) + (++y); //x = 8, y = 8, z = 15;
		  关系运算符：&&、||、!
		  三木运算符：condition ? express1 : express2, 如果condition 为真，结果为express1的值，否则为express2的值；
		  位运算符：&、｜、^、～、>>、<<;
	1.5、运算符优先级
		  运算符优先级比较难记，实际开发过程中为了代码简洁易懂，通常使用括号来手动赋予优先级；
四、字符串
	1.1、String类
		从概念上讲，java字符串就是Unicode字符序列，java中没有内置的字符串类型，而是通过类库中预定义一个String类，里面有很多的方法可以使用；
		e.g.
		子串：
			String greeting = "hello";
			String s = greeting.substring(0,3); // 子串，"hel" 左闭右开原则
		拼接：
		 	String a = "hello";
			String b = "world";
			String c = a + " " + b; //hello world	
			当一个字符串和一个非字符串拼接时，可以将其转换为字符串，任何java对象都可以转换成为一个字符串；
			另外，还有如果需要把多个字符串用一个界定符放在一起，可以使用join方法，
				String all = String.join("#","1", "2", "3"); // all = "1#2#"
			还有如果想要重复一个字符串可以使用repeat方法，
				String repeated = "Java".repeat(3) // repeated = "JavaJavaJava"
	1.2、StringBuffer类和StringBuilder类
		StringBuffer和StringBuilder是一种可以实现字符串内容更改的，如果说java中的String类是C++中的字符串，那么StringBuffer和StringBuilder就是C++中的String类，可以实现字符串的修改、增加长度等等。
		但是StringBuffer不同于StringBuilder的是，StringBuffer是线程安全的，类内实现了加了锁，而StringBuilder是非线程安全的，但是效率相对来说比较高，所以在单线程的场景一般使用StringBuffer。

五、类和对象
	类和对象属于已经比较了解的范畴，也有很多资料，所以这里不再进行总结。
	但是需要补充一些，加深理解；
	JAR文件：当需要将应用程序打包时，我们通常希望获得一个单独的文件，而不是一个包含大量文件的目录结构，JAR就是基于此目的设计的。jar是一种压缩包，类似于zip或者tar包的格式，命令也和tar压缩包的生成方式类似，
		jar cvf javFileName file1 file2...（注意这里不带“-”）；
六、异常
	    在java中，所有异常都是派生于Throwable类，在下一层，主要分解为两个类，一个是Eror，一个是Exception。其中Error类描述了java类运行是系统内部的错误或者资源耗尽，你的系统不会抛出此类型的对象，如果出现了这种
	内部错误，除了通知用户并终止程序之外，你基本上无法避免这种错误。
		我们需要重点关注的是Exception这个结构，这个结构也会派生出来两个分之，一个是IOException，另一个是RuntimeException（由编程导致的异常，例如数组越界、反问null指针、错误的强制类型转换等，相当于C++中的
	logic_errror）；java将派生于Error类和RuntimeException类的异常称为非检查型异常，其他异常称为检查型异常.
